networks:
  bank-network:
    external: true  # If the network does not exist, it must be created manually first

volumes:
  original-database-volume:
    external: true  
  auth-database-volume:
    external: true  
  core-database-01-volume:
    external: true  
  core-database-02-volume:
    external: true  
  redis-volume:
    external: true  
  kafka-volume:
    external: true  
  manage-service-logs:
  auth-service-logs:
  transaction-service-logs:
  notification-service-logs:

  
services:
  original-database:
    container_name: original-database
    image: postgres:17.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-secret}
      - POSTGRES_DB=${PG_DATABASE_ORIGINAL_DB:-original_db}
    ports:
      - "${PG_PORT_ORIGINAL_DB}:5432"
    networks:
      - bank-network
    volumes:
      - original-database-volume:/var/lib/postgresql/data
    command: >
      postgres -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U ${PG_USER:-postgres} -d ${PG_DATABASE_ORIGINAL_DB:-original_db} || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
  
  auth-database:
    container_name: auth-database
    image: postgres:17.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-secret}
      - POSTGRES_DB=${PG_DATABASE_AUTH_DB:-auth_db}
    ports:
      - "${PG_PORT_AUTH_DB}:5432"
    networks:
      - bank-network
    volumes:
      - auth-database-volume:/var/lib/postgresql/data
    command: >
      postgres -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U ${PG_USER:-postgres} -d ${PG_DATABASE_AUTH_DB:-auth_db} || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3

  core-database-01:
    container_name: core-database-01
    image: postgres:17.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-secret}
      - POSTGRES_DB=${PG_DATABASE_CORE_DB:-core_db}
    ports:
      - "${PG_PORT_SHARD_1}:5432"
    networks:
      - bank-network
    volumes:
      - core-database-01-volume:/var/lib/postgresql/data
    command: >
      postgres 
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U ${PG_USER:-postgres} -d ${PG_DATABASE_CORE_DB:-core_db} || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "4"
    #       memory: "10GB"

  core-database-02:
    container_name: core-database-02
    image: postgres:17.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-secret}
      - POSTGRES_DB=${PG_DATABASE_CORE_DB:-core_db}
    ports:
      - "${PG_PORT_SHARD_2}:5432"
    networks:
      - bank-network
    volumes:
      - core-database-02-volume:/var/lib/postgresql/data
    command: >
      postgres 
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432 -U ${PG_USER:-postgres} -d ${PG_DATABASE_CORE_DB:-core_db} || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "4"
    #       memory: "10GB"

### Command for optim postgres
# command: >
#   postgres 
#   -c max_connections=200
#   -c shared_buffers=2GB
#   -c work_mem=64MB
#   -c effective_cache_size=6GB
#   -c max_parallel_workers_per_gather=4
#   -c max_worker_processes=8
#   -c wal_buffers=16MB
#   -c checkpoint_completion_target=0.9

  redis:
    container_name: redis
    image: redis:7.4-alpine3.20
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - bank-network
    volumes:
      - redis-volume:/data
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 4g

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6.2
    restart: always
    ports:
      - "${KAFKA_CLIENT_PORT}:${KAFKA_CLIENT_PORT}"
      - "${KAFKA_CONTROLLER_PORT}:${KAFKA_CONTROLLER_PORT}"
    environment:
      - KAFKA_CFG_NODE_ID=${KAFKA_BROKER_ID}
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_BROKER_ID}@kafka:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENERS=${KAFKA_LISTENERS}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - bank-network
    volumes:
      - kafka-volume:/bitnami/kafka

  # reverse-proxy:
  #   container_name: reverse-proxy
  #   image: nginx:1.27.2
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx/templates:/etc/nginx/templates
  #     - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - bank-network

  shardman-service:
    container_name: shardman-service
    image: shardman-service
    restart: unless-stopped
    ports:
      - "8080:80"
      - "10443:443"
    depends_on:
      original-database:
        condition: service_healthy
    networks:
      - bank-network

  auth-service:
    container_name: auth-service
    image: auth-service
    restart: unless-stopped
    ports:
      - "8081:80"
      - "10444:443"
    depends_on:
      auth-database:
        condition: service_healthy
    networks:
      - bank-network

  cusman-service:
    container_name: cusman-service
    image: cusman-service
    restart: unless-stopped
    ports:
      - "8082:80"
      - "10445:443"
    depends_on:
      core-database-01:
        condition: service_healthy
      core-database-02:
        condition: service_healthy
    networks:
      - bank-network

  moneytransfer-service:
    container_name: moneytransfer-service
    image: moneytransfer-service
    restart: unless-stopped
    ports:
      - "8083:80"
      - "10446:443"
    depends_on:
      core-database-01:
        condition: service_healthy
      core-database-02:
        condition: service_healthy
    networks:
      - bank-network