// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET current_balance = current_balance + $1
WHERE account_id = $2
RETURNING account_id, customer_id, current_balance, currency_type, created_at, description, account_status
`

type AddAccountBalanceParams struct {
	Amount    int64 `json:"amount"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, addAccountBalance, arg.Amount, arg.AccountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.CurrentBalance,
		&i.CurrencyType,
		&i.CreatedAt,
		&i.Description,
		&i.AccountStatus,
	)
	return i, err
}

const checkAccountByID = `-- name: CheckAccountByID :one
SELECT 
  a.account_id, 
  c.full_name AS customer_name, 
  a.currency_type, 
  a.account_status
FROM accounts a
JOIN customers c ON a.customer_id = c.customer_id
WHERE a.account_id = $1
LIMIT 1
`

type CheckAccountByIDRow struct {
	AccountID     int64         `json:"account_id"`
	CustomerName  string        `json:"customer_name"`
	CurrencyType  Currencytype  `json:"currency_type"`
	AccountStatus Accountstatus `json:"account_status"`
}

func (q *Queries) CheckAccountByID(ctx context.Context, accountID int64) (CheckAccountByIDRow, error) {
	row := q.db.QueryRow(ctx, checkAccountByID, accountID)
	var i CheckAccountByIDRow
	err := row.Scan(
		&i.AccountID,
		&i.CustomerName,
		&i.CurrencyType,
		&i.AccountStatus,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    account_id,
    customer_id,
    current_balance,
    currency_type,
    account_status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING account_id, customer_id, current_balance, currency_type, created_at, description, account_status
`

type CreateAccountParams struct {
	AccountID      int64         `json:"account_id"`
	CustomerID     int64         `json:"customer_id"`
	CurrentBalance int64         `json:"current_balance"`
	CurrencyType   Currencytype  `json:"currency_type"`
	AccountStatus  Accountstatus `json:"account_status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.AccountID,
		arg.CustomerID,
		arg.CurrentBalance,
		arg.CurrencyType,
		arg.AccountStatus,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.CurrentBalance,
		&i.CurrencyType,
		&i.CreatedAt,
		&i.Description,
		&i.AccountStatus,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT account_id, customer_id, current_balance, currency_type, created_at, description, account_status FROM accounts
WHERE account_id = $1
LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, accountID int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.CurrentBalance,
		&i.CurrencyType,
		&i.CreatedAt,
		&i.Description,
		&i.AccountStatus,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one

SELECT account_id, customer_id, current_balance, currency_type, created_at, description, account_status FROM accounts
WHERE account_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

// The methods below are directly related to transactions (multiple queries), so will be implemented query with id
// Especially directly related to the locking mechanism, locking in order in the database
// ...
func (q *Queries) GetAccountForUpdate(ctx context.Context, accountID int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.CurrentBalance,
		&i.CurrencyType,
		&i.CreatedAt,
		&i.Description,
		&i.AccountStatus,
	)
	return i, err
}

const listAccountByCustomerID = `-- name: ListAccountByCustomerID :many
SELECT account_id, customer_id, current_balance, currency_type, created_at, description, account_status FROM accounts
WHERE customer_id = $1
ORDER BY account_id
`

func (q *Queries) ListAccountByCustomerID(ctx context.Context, customerID int64) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.CustomerID,
			&i.CurrentBalance,
			&i.CurrencyType,
			&i.CreatedAt,
			&i.Description,
			&i.AccountStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts 
SET current_balance = $2
WHERE account_id = $1
RETURNING account_id, customer_id, current_balance, currency_type, created_at, description, account_status
`

type UpdateAccountBalanceParams struct {
	AccountID      int64 `json:"account_id"`
	CurrentBalance int64 `json:"current_balance"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountBalance, arg.AccountID, arg.CurrentBalance)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.CustomerID,
		&i.CurrentBalance,
		&i.CurrencyType,
		&i.CreatedAt,
		&i.Description,
		&i.AccountStatus,
	)
	return i, err
}
