// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_transactions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccountTransaction = `-- name: CreateAccountTransaction :one
INSERT INTO account_transactions (
  transaction_id,
  amount,
  account_id,
  new_balance,
  description,
  transaction_type,
  transaction_status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status
`

type CreateAccountTransactionParams struct {
	TransactionID     uuid.UUID         `json:"transaction_id"`
	Amount            int64             `json:"amount"`
	AccountID         int64             `json:"account_id"`
	NewBalance        int64             `json:"new_balance"`
	Description       string            `json:"description"`
	TransactionType   Transactiontype   `json:"transaction_type"`
	TransactionStatus Transactionstatus `json:"transaction_status"`
}

func (q *Queries) CreateAccountTransaction(ctx context.Context, arg CreateAccountTransactionParams) (AccountTransaction, error) {
	row := q.db.QueryRow(ctx, createAccountTransaction,
		arg.TransactionID,
		arg.Amount,
		arg.AccountID,
		arg.NewBalance,
		arg.Description,
		arg.TransactionType,
		arg.TransactionStatus,
	)
	var i AccountTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}

const getAccountTransaction = `-- name: GetAccountTransaction :one
SELECT transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status FROM account_transactions
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetAccountTransaction(ctx context.Context, transactionID uuid.UUID) (AccountTransaction, error) {
	row := q.db.QueryRow(ctx, getAccountTransaction, transactionID)
	var i AccountTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}

const listAccountTransactions = `-- name: ListAccountTransactions :many
SELECT transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status FROM account_transactions
WHERE account_id = $1 
ORDER BY transaction_id
LIMIT $2 OFFSET $3
`

type ListAccountTransactionsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAccountTransactions(ctx context.Context, arg ListAccountTransactionsParams) ([]AccountTransaction, error) {
	rows, err := q.db.Query(ctx, listAccountTransactions, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountTransaction{}
	for rows.Next() {
		var i AccountTransaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.Amount,
			&i.AccountID,
			&i.NewBalance,
			&i.TransactionTime,
			&i.Description,
			&i.TransactionType,
			&i.TransactionStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountTransaction = `-- name: UpdateAccountTransaction :one
UPDATE account_transactions 
SET transaction_status = $2
WHERE transaction_id = $1
RETURNING transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status
`

type UpdateAccountTransactionParams struct {
	TransactionID     uuid.UUID         `json:"transaction_id"`
	TransactionStatus Transactionstatus `json:"transaction_status"`
}

func (q *Queries) UpdateAccountTransaction(ctx context.Context, arg UpdateAccountTransactionParams) (AccountTransaction, error) {
	row := q.db.QueryRow(ctx, updateAccountTransaction, arg.TransactionID, arg.TransactionStatus)
	var i AccountTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}
