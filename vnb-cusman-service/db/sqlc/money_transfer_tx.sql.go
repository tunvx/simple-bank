// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: money_transfer_tx.sql

package db

import (
	"context"
)

const createMoneyTransferTransaction = `-- name: CreateMoneyTransferTransaction :one
INSERT INTO money_transfer_transactions (
  amount,
  account_id,
  new_balance,
  description,
  transaction_type,
  transaction_status
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status
`

type CreateMoneyTransferTransactionParams struct {
	Amount            int64             `json:"amount"`
	AccountID         int64             `json:"account_id"`
	NewBalance        int64             `json:"new_balance"`
	Description       string            `json:"description"`
	TransactionType   Transactiontype   `json:"transaction_type"`
	TransactionStatus Transactionstatus `json:"transaction_status"`
}

func (q *Queries) CreateMoneyTransferTransaction(ctx context.Context, arg CreateMoneyTransferTransactionParams) (MoneyTransferTransaction, error) {
	row := q.db.QueryRow(ctx, createMoneyTransferTransaction,
		arg.Amount,
		arg.AccountID,
		arg.NewBalance,
		arg.Description,
		arg.TransactionType,
		arg.TransactionStatus,
	)
	var i MoneyTransferTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}

const getMoneyTransferTransaction = `-- name: GetMoneyTransferTransaction :one
SELECT transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status FROM money_transfer_transactions
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetMoneyTransferTransaction(ctx context.Context, transactionID int64) (MoneyTransferTransaction, error) {
	row := q.db.QueryRow(ctx, getMoneyTransferTransaction, transactionID)
	var i MoneyTransferTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}

const listMoneyTransferTransactionByAccountID = `-- name: ListMoneyTransferTransactionByAccountID :many
SELECT transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status FROM money_transfer_transactions
WHERE account_id = $1 
ORDER BY transaction_id
LIMIT $2
OFFSET $3
`

type ListMoneyTransferTransactionByAccountIDParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListMoneyTransferTransactionByAccountID(ctx context.Context, arg ListMoneyTransferTransactionByAccountIDParams) ([]MoneyTransferTransaction, error) {
	rows, err := q.db.Query(ctx, listMoneyTransferTransactionByAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MoneyTransferTransaction{}
	for rows.Next() {
		var i MoneyTransferTransaction
		if err := rows.Scan(
			&i.TransactionID,
			&i.Amount,
			&i.AccountID,
			&i.NewBalance,
			&i.TransactionTime,
			&i.Description,
			&i.TransactionType,
			&i.TransactionStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMoneyTransferTransactionStatus = `-- name: UpdateMoneyTransferTransactionStatus :one
UPDATE money_transfer_transactions 
SET 
    transaction_status = $2
WHERE transaction_id = $1
RETURNING transaction_id, amount, account_id, new_balance, transaction_time, description, transaction_type, transaction_status
`

type UpdateMoneyTransferTransactionStatusParams struct {
	TransactionID     int64             `json:"transaction_id"`
	TransactionStatus Transactionstatus `json:"transaction_status"`
}

func (q *Queries) UpdateMoneyTransferTransactionStatus(ctx context.Context, arg UpdateMoneyTransferTransactionStatusParams) (MoneyTransferTransaction, error) {
	row := q.db.QueryRow(ctx, updateMoneyTransferTransactionStatus, arg.TransactionID, arg.TransactionStatus)
	var i MoneyTransferTransaction
	err := row.Scan(
		&i.TransactionID,
		&i.Amount,
		&i.AccountID,
		&i.NewBalance,
		&i.TransactionTime,
		&i.Description,
		&i.TransactionType,
		&i.TransactionStatus,
	)
	return i, err
}
