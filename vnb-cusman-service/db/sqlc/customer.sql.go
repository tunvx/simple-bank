// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  customer_rid,
  fullname,
  date_of_birth,
  address,
  phone_number,
  email,
  customer_tier,
  customer_segment,
  financial_status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING customer_id, customer_rid, fullname, date_of_birth, address, phone_number, email, customer_tier, customer_segment, financial_status, is_email_verified
`

type CreateCustomerParams struct {
	CustomerRid     string          `json:"customer_rid"`
	Fullname        string          `json:"fullname"`
	DateOfBirth     time.Time       `json:"date_of_birth"`
	Address         string          `json:"address"`
	PhoneNumber     string          `json:"phone_number"`
	Email           string          `json:"email"`
	CustomerTier    Customertier    `json:"customer_tier"`
	CustomerSegment Customersegment `json:"customer_segment"`
	FinancialStatus Financialstatus `json:"financial_status"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.CustomerRid,
		arg.Fullname,
		arg.DateOfBirth,
		arg.Address,
		arg.PhoneNumber,
		arg.Email,
		arg.CustomerTier,
		arg.CustomerSegment,
		arg.FinancialStatus,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Address,
		&i.PhoneNumber,
		&i.Email,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.IsEmailVerified,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT customer_id, customer_rid, fullname, date_of_birth, address, phone_number, email, customer_tier, customer_segment, financial_status, is_email_verified FROM customers
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByID(ctx context.Context, customerID int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Address,
		&i.PhoneNumber,
		&i.Email,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.IsEmailVerified,
	)
	return i, err
}

const getCustomerByRid = `-- name: GetCustomerByRid :one
SELECT customer_id, customer_rid, fullname, date_of_birth, address, phone_number, email, customer_tier, customer_segment, financial_status, is_email_verified FROM customers
WHERE customer_rid = $1 LIMIT 1
`

func (q *Queries) GetCustomerByRid(ctx context.Context, customerRid string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByRid, customerRid)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Address,
		&i.PhoneNumber,
		&i.Email,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.IsEmailVerified,
	)
	return i, err
}

const getCustomerIdByRid = `-- name: GetCustomerIdByRid :one
SELECT customer_id FROM customers
WHERE customer_rid = $1 LIMIT 1
`

func (q *Queries) GetCustomerIdByRid(ctx context.Context, customerRid string) (int64, error) {
	row := q.db.QueryRow(ctx, getCustomerIdByRid, customerRid)
	var customer_id int64
	err := row.Scan(&customer_id)
	return customer_id, err
}

const getCustomerNameByID = `-- name: GetCustomerNameByID :one
SELECT fullname FROM customers
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerNameByID(ctx context.Context, customerID int64) (string, error) {
	row := q.db.QueryRow(ctx, getCustomerNameByID, customerID)
	var fullname string
	err := row.Scan(&fullname)
	return fullname, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
  address = COALESCE($1, address),
  phone_number = COALESCE($2, phone_number),
  email = COALESCE($3, email),
  is_email_verified = COALESCE($4, is_email_verified)
WHERE
  customer_id = $5
RETURNING customer_id, customer_rid, fullname, date_of_birth, address, phone_number, email, customer_tier, customer_segment, financial_status, is_email_verified
`

type UpdateCustomerParams struct {
	Address         pgtype.Text `json:"address"`
	PhoneNumber     pgtype.Text `json:"phone_number"`
	Email           pgtype.Text `json:"email"`
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	CustomerID      int64       `json:"customer_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Address,
		arg.PhoneNumber,
		arg.Email,
		arg.IsEmailVerified,
		arg.CustomerID,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Address,
		&i.PhoneNumber,
		&i.Email,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.IsEmailVerified,
	)
	return i, err
}
