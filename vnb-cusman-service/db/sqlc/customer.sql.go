// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  customer_id,
  customer_rid,
  full_name,
  date_of_birth,
  permanent_address,
  phone_number,
  email_address,
  customer_tier,
  customer_segment,
  financial_status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING customer_id, customer_rid, full_name, date_of_birth, permanent_address, phone_number, email_address, customer_tier, customer_segment, financial_status, created_at, updated_at, is_email_verified
`

type CreateCustomerParams struct {
	CustomerID       int64           `json:"customer_id"`
	CustomerRid      string          `json:"customer_rid"`
	FullName         string          `json:"full_name"`
	DateOfBirth      time.Time       `json:"date_of_birth"`
	PermanentAddress string          `json:"permanent_address"`
	PhoneNumber      string          `json:"phone_number"`
	EmailAddress     string          `json:"email_address"`
	CustomerTier     Customertier    `json:"customer_tier"`
	CustomerSegment  Customersegment `json:"customer_segment"`
	FinancialStatus  Financialstatus `json:"financial_status"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.CustomerID,
		arg.CustomerRid,
		arg.FullName,
		arg.DateOfBirth,
		arg.PermanentAddress,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.CustomerTier,
		arg.CustomerSegment,
		arg.FinancialStatus,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.FullName,
		&i.DateOfBirth,
		&i.PermanentAddress,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT customer_id, customer_rid, full_name, date_of_birth, permanent_address, phone_number, email_address, customer_tier, customer_segment, financial_status, created_at, updated_at, is_email_verified FROM customers
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByID(ctx context.Context, customerID int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.FullName,
		&i.DateOfBirth,
		&i.PermanentAddress,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getCustomerByRid = `-- name: GetCustomerByRid :one
SELECT customer_id, customer_rid, full_name, date_of_birth, permanent_address, phone_number, email_address, customer_tier, customer_segment, financial_status, created_at, updated_at, is_email_verified FROM customers
WHERE customer_rid = $1 LIMIT 1
`

func (q *Queries) GetCustomerByRid(ctx context.Context, customerRid string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByRid, customerRid)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.FullName,
		&i.DateOfBirth,
		&i.PermanentAddress,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
  phone_number = COALESCE($1, phone_number),
  email_address = COALESCE($2, email_address),
  is_email_verified = COALESCE($3, is_email_verified)
WHERE
  customer_id = $4 -- id from auth_token
RETURNING customer_id, customer_rid, full_name, date_of_birth, permanent_address, phone_number, email_address, customer_tier, customer_segment, financial_status, created_at, updated_at, is_email_verified
`

type UpdateCustomerParams struct {
	PhoneNumber     pgtype.Text `json:"phone_number"`
	EmailAddress    pgtype.Text `json:"email_address"`
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	CustomerID      int64       `json:"customer_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.IsEmailVerified,
		arg.CustomerID,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerRid,
		&i.FullName,
		&i.DateOfBirth,
		&i.PermanentAddress,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.CustomerTier,
		&i.CustomerSegment,
		&i.FinancialStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
