version: '3.9'

networks:
  bank-network:
    driver: bridge

volumes:
  postgres01-volume:
  postgres02-volume:
  redis-volume:
  kafka-volume:
  manage-service-logs:
  auth-service-logs:
  transaction-service-logs:
  notification-service-logs:

services:
  postgres01:
    container_name: postgres01
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=core_db
    ports:
      - "5432:5432"
    networks:
      - bank-network
    volumes:
      - postgres01-volume:/var/lib/postgresql/data
    command: >
      postgres -c max_connections=200
               -c log_min_duration_statement=50
               -c logging_collector=on
               -c log_directory=log
               -c log_filename=postgresql-%Y-%m-%d.log 
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8g


  postgres02:
    container_name: postgres02
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=auth_db
    ports:
      - "5433:5432"
    networks:
      - bank-network
    volumes:
      - postgres02-volume:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:7.4-alpine3.20
    ports:
      - "6379:6379"
    networks:
      - bank-network
    volumes:
      - redis-volume:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2g

  # kafka:
  #   container_name: kafka
  #   image: bitnami/kafka:3.6.2
  #   restart: always
  #   ports:
  #   - "9092:9092"
  #   - "9093:9093"  # Expose the controller port
  #   environment:
  #     # KRaft settings
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     # Listeners
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #   networks:
  #     - bank-network
  #   volumes:
  #     - kafka-volume:/bitnami/kafka 
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 1g

  manage-service:
    container_name: manage-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0001.manage
    depends_on:
      - redis
      - postgres01
    ports:
      - "8080:8080"
      - "8090:8090"
    networks:
      - bank-network
    volumes:
      - manage-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]

  auth-service:
    container_name: auth-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0002.auth
    depends_on:
      - redis
      - postgres02
    ports:
      - "8081:8081"
      - "8091:8091"
    networks:
      - bank-network
    volumes:
      - auth-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres02:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]

  transaction-service:
    container_name: transaction-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0003.transaction
    depends_on:
      - redis
      - postgres01
      - manage-service
    ports:
      - "8082:8082"
      - "8092:8092"
    networks:
      - bank-network
    volumes:
      - transaction-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]
    deploy:
      # replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 2g
    

  notification-service:
    container_name: notification-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0004.notification
    depends_on:
      - redis
    networks:
      - bank-network
    volumes:
      - notification-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "--", "/app/start.sh" ]
    command: [ "/app/main" ]