version: '3.9'

networks:
  bank-network:
    driver: bridge

volumes:
  postgres01-volume:
  postgres02-volume:
  redis-volume:
  kafka-volume:
  manage-service-logs:
  auth-service-logs:
  transaction-service-logs:
  notification-service-logs:

services:
  postgres01:
    container_name: postgres01
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=core_db
    ports:
      - "5432:5432"
    networks:
      - bank-network
    volumes:
      - postgres01-volume:/var/lib/postgresql/data
    command: >
      postgres -c max_connections=150
               -c shared_buffers=2GB
               -c effective_cache_size=4.5GB
               -c work_mem=16MB
               -c maintenance_work_mem=512MB
               -c checkpoint_timeout=2min
               -c checkpoint_completion_target=0.9
               -c max_wal_size=1GB
               -c min_wal_size=512MB
               -c wal_buffers=32MB
               -c synchronous_commit=off
               -c random_page_cost=1.1
               -c effective_io_concurrency=200
               -c autovacuum=on
               -c autovacuum_max_workers=3
               -c autovacuum_naptime=20s
               -c autovacuum_vacuum_scale_factor=0.05
               -c autovacuum_analyze_scale_factor=0.02
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 6g

  postgres02:
    container_name: postgres02
    image: postgres:17.0-alpine3.20
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=auth_db
    ports:
      - "5433:5432"
    networks:
      - bank-network
    volumes:
      - postgres02-volume:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:7.4-alpine3.20
    ports:
      - "6379:6379"
    networks:
      - bank-network
    volumes:
      - redis-volume:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2g

  # kafka:
  #   container_name: kafka
  #   image: bitnami/kafka:3.6.2
  #   restart: always
  #   ports:
  #   - "9092:9092"
  #   - "9093:9093"  # Expose the controller port
  #   environment:
  #     # KRaft settings
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     # Listeners
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #   networks:
  #     - bank-network
  #   volumes:
  #     - kafka-volume:/bitnami/kafka 
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 1g

  traefik:
    container_name: traefik
    image: traefik:v3.1
    restart: always
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.traefik.address=:80"                           # Traefik Dashboard
      - "--entryPoints.manage-service-web.address=:8080"              # HTTP Manage Service
      - "--entryPoints.manage-service-rpc.address=:8090"              # gRPC Manage Service
      - "--entryPoints.auth-service-web.address=:8081"                # HTTP Auth Service
      - "--entryPoints.auth-service-rpc.address=:8091"                # gRPC Auth Service
      - "--entryPoints.transaction-service-web.address=:8082"                # HTTP Auth Service
      - "--entryPoints.transaction-service-rpc.address=:8092"                # gRPC Auth Service
      - "--accesslog.filepath=/var/log/traefik/access.log"
    ports:
      - "80:80"     # Dashboard
      - "8080:8080" # HTTP
      - "8090:8090" # gRPC
      - "8081:8081" # HTTP
      - "8091:8091" # gRPC
      - "8082:8082" # HTTP
      - "8092:8092" # gRPC
    networks:
      - bank-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  manage-service:
    # container_name: manage-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0001.manage
    depends_on:
      - redis
      - postgres01
    # ports:
    #   - "8080:8080"
    #   - "8090:8090"
    networks:
      - bank-network
    volumes:
      - manage-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]
    labels:
      - "traefik.enable=true"

      # HTTP routing for manage-service
      # - "traefik.http.routers.api-http.rule=Host(`localhost`)"                      # Routing rule for HTTP
      - "traefik.http.routers.manage-service-http.rule=PathPrefix(`/`)"               # Rule for all HTTP requests
      - "traefik.http.routers.manage-service-http.service=manage-service-http"        # Explicitly link to the HTTP service
      - "traefik.http.routers.manage-service-http.entrypoints=manage-service-web"
      - "traefik.http.services.manage-service-http.loadbalancer.server.port=8080"     # HTTP port for Traefik

      # gRPC routing for manage-service
      # - "traefik.http.routers.api-grpc.rule=Host(`localhost`)"                      # Routing rule for gRPC
      - "traefik.http.routers.manage-service-grpc.rule=PathPrefix(`/`)"               # Rule for all gRPC requests
      - "traefik.http.routers.manage-service-grpc.service=manage-service-grpc"        # Explicitly link to the gRPC service
      - "traefik.http.routers.manage-service-grpc.entrypoints=manage-service-rpc"
      - "traefik.http.services.manage-service-grpc.loadbalancer.server.scheme=h2c" 
      - "traefik.http.services.manage-service-grpc.loadbalancer.server.port=8090"     # gRPC port for Traefik

  auth-service:
    # container_name: auth-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0002.auth
    depends_on:
      - redis
      - postgres02
    # ports:
    #   - "8081:8081"
    #   - "8091:8091"
    networks:
      - bank-network
    volumes:
      - auth-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres02:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]
    labels:
      - "traefik.enable=true"

      # HTTP routing for auth-service
      # - "traefik.http.routers.api-http.rule=Host(`localhost`)"                      # Routing rule for HTTP
      - "traefik.http.routers.auth-service-http.rule=PathPrefix(`/`)"                 # Rule for all HTTP requests
      - "traefik.http.routers.auth-service-http.service=auth-service-http"            # Explicitly link to the HTTP service
      - "traefik.http.routers.auth-service-http.entrypoints=auth-service-web"
      - "traefik.http.services.auth-service-http.loadbalancer.server.port=8081"       # HTTP port for Traefik

      # gRPC routing for auth-service
      # - "traefik.http.routers.api-grpc.rule=Host(`localhost`)"                      # Routing rule for gRPC
      - "traefik.http.routers.auth-service-grpc.rule=PathPrefix(`/`)"                 # Rule for all gRPC requests
      - "traefik.http.routers.auth-service-grpc.service=auth-service-grpc"            # Explicitly link to the gRPC service
      - "traefik.http.routers.auth-service-grpc.entrypoints=auth-service-rpc"
      - "traefik.http.services.auth-service-grpc.loadbalancer.server.scheme=h2c" 
      - "traefik.http.services.auth-service-grpc.loadbalancer.server.port=8091"       # gRPC port for Traefik

  transaction-service:
    # container_name: transaction-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0003.transaction
    depends_on:
      - redis
      - postgres01
      - manage-service
    # ports:
    #   - "8082:8082"
    #   - "8092:8092"
    networks:
      - bank-network
    volumes:
      - transaction-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
    command: [ "/app/main" ]
    labels:
      - "traefik.enable=true"

      # HTTP routing for transaction-service
      # - "traefik.http.routers.api-http.rule=Host(`localhost`)"                      # Routing rule for HTTP
      - "traefik.http.routers.transaction-service-http.rule=PathPrefix(`/`)"             # Rule for all HTTP requests
      - "traefik.http.routers.transaction-service-http.service=transaction-service-http"    # Explicitly link to the HTTP service
      - "traefik.http.routers.transaction-service-http.entrypoints=transaction-service-web"
      - "traefik.http.services.transaction-service-http.loadbalancer.server.port=8082"   # HTTP port for Traefik

      # gRPC routing for transaction-service
      # - "traefik.http.routers.api-grpc.rule=Host(`localhost`)"                     # Routing rule for gRPC
      - "traefik.http.routers.transaction-service-grpc.rule=PathPrefix(`/`)"            # Rule for all gRPC requests
      - "traefik.http.routers.transaction-service-grpc.service=transaction-service-grpc"   # Explicitly link to the gRPC service
      - "traefik.http.routers.transaction-service-grpc.entrypoints=transaction-service-rpc"
      - "traefik.http.services.transaction-service-grpc.loadbalancer.server.scheme=h2c" 
      - "traefik.http.services.transaction-service-grpc.loadbalancer.server.port=8092"  # gRPC port for Traefik
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2g
    

  notification-service:
    container_name: notification-service
    build:
      context: ../ 
      dockerfile: ./domolo/dockerfiles/Dockerfile.0004.notification
    depends_on:
      - redis
    networks:
      - bank-network
    volumes:
      - notification-service-logs:/var/log
    entrypoint: [ "/app/wait-for.sh", "redis:6379", "--", "/app/start.sh" ]
    command: [ "/app/main" ]


# version: '3.9'

# networks:
#   bank-network:
#     driver: bridge

# volumes:
#   postgres01-volume:
#   postgres02-volume:
#   redis-volume:
#   kafka-volume:
#   manage-service-logs:
#   auth-service-logs:
#   transaction-service-logs:
#   notification-service-logs:

# services:
#   postgres01:
#     container_name: postgres01
#     image: postgres:17.0-alpine3.20
#     restart: always
#     environment:
#       - POSTGRES_USER=root
#       - POSTGRES_PASSWORD=secret
#       - POSTGRES_DB=core_db
#     ports:
#       - "5432:5432"
#     networks:
#       - bank-network
#     volumes:
#       - postgres01-volume:/var/lib/postgresql/data
#     command: >
#       postgres -c max_connections=150
#                -c shared_buffers=2GB
#                -c effective_cache_size=4.5GB
#                -c work_mem=16MB
#                -c maintenance_work_mem=512MB
#                -c checkpoint_timeout=2min
#                -c checkpoint_completion_target=0.9
#                -c max_wal_size=1GB
#                -c min_wal_size=512MB
#                -c wal_buffers=32MB
#                -c synchronous_commit=off
#                -c random_page_cost=1.1
#                -c effective_io_concurrency=200
#                -c autovacuum=on
#                -c autovacuum_max_workers=3
#                -c autovacuum_naptime=20s
#                -c autovacuum_vacuum_scale_factor=0.05
#                -c autovacuum_analyze_scale_factor=0.02
#     deploy:
#       resources:
#         limits:
#           cpus: '3'
#           memory: 6g

#   postgres02:
#     container_name: postgres02
#     image: postgres:17.0-alpine3.20
#     restart: always
#     environment:
#       - POSTGRES_USER=root
#       - POSTGRES_PASSWORD=secret
#       - POSTGRES_DB=auth_db
#     ports:
#       - "5433:5432"
#     networks:
#       - bank-network
#     volumes:
#       - postgres02-volume:/var/lib/postgresql/data

#   redis:
#     container_name: redis
#     image: redis:7.4-alpine3.20
#     ports:
#       - "6379:6379"
#     networks:
#       - bank-network
#     volumes:
#       - redis-volume:/data
#     deploy:
#       resources:
#         limits:
#           cpus: '1'
#           memory: 2g

#   # kafka:
#   #   container_name: kafka
#   #   image: bitnami/kafka:3.6.2
#   #   restart: always
#   #   ports:
#   #   - "9092:9092"
#   #   - "9093:9093"  # Expose the controller port
#   #   environment:
#   #     # KRaft settings
#   #     - KAFKA_CFG_NODE_ID=1
#   #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
#   #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
#   #     # Listeners
#   #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#   #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
#   #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#   #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#   #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#   #   networks:
#   #     - bank-network
#   #   volumes:
#   #     - kafka-volume:/bitnami/kafka 
#   #   deploy:
#   #     resources:
#   #       limits:
#   #         cpus: '1'
#   #         memory: 1g

#   manage-service:
#     container_name: manage-service
#     build:
#       context: ../ 
#       dockerfile: ./domolo/dockerfiles/Dockerfile.0001.manage
#     depends_on:
#       - redis
#       - postgres01
#     ports:
#       - "8080:8080"
#       - "8090:8090"
#     networks:
#       - bank-network
#     volumes:
#       - manage-service-logs:/var/log
#     entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
#     command: [ "/app/main" ]

#   auth-service:
#     container_name: auth-service
#     build:
#       context: ../ 
#       dockerfile: ./domolo/dockerfiles/Dockerfile.0002.auth
#     depends_on:
#       - redis
#       - postgres02
#     ports:
#       - "8081:8081"
#       - "8091:8091"
#     networks:
#       - bank-network
#     volumes:
#       - auth-service-logs:/var/log
#     entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres02:5432", "--", "/app/start.sh" ]
#     command: [ "/app/main" ]

#   transaction-service:
#     container_name: transaction-service
#     build:
#       context: ../ 
#       dockerfile: ./domolo/dockerfiles/Dockerfile.0003.transaction
#     depends_on:
#       - redis
#       - postgres01
#       - manage-service
#     ports:
#       - "8082:8082"
#       - "8092:8092"
#     networks:
#       - bank-network
#     volumes:
#       - transaction-service-logs:/var/log
#     entrypoint: [ "/app/wait-for.sh", "redis:6379", "postgres01:5432", "--", "/app/start.sh" ]
#     command: [ "/app/main" ]
#     deploy:
#       # replicas: 2
#       resources:
#         limits:
#           cpus: '4'
#           memory: 4g
    

#   notification-service:
#     container_name: notification-service
#     build:
#       context: ../ 
#       dockerfile: ./domolo/dockerfiles/Dockerfile.0004.notification
#     depends_on:
#       - redis
#     networks:
#       - bank-network
#     volumes:
#       - notification-service-logs:/var/log
#     entrypoint: [ "/app/wait-for.sh", "redis:6379", "--", "/app/start.sh" ]
#     command: [ "/app/main" ]