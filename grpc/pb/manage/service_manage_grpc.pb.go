// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: manage/service_manage.proto

package manage

import (
	context "context"
	account "github.com/tunvx/simplebank/grpc/pb/manage/account"
	customer "github.com/tunvx/simplebank/grpc/pb/manage/customer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManageService_CreateCustomer_FullMethodName         = "/manage.ManageService/CreateCustomer"
	ManageService_VerifyEmail_FullMethodName            = "/manage.ManageService/VerifyEmail"
	ManageService_GetCustomerByRid_FullMethodName       = "/manage.ManageService/GetCustomerByRid"
	ManageService_IGetCustomerByID_FullMethodName       = "/manage.ManageService/IGetCustomerByID"
	ManageService_IGetCustomerByRid_FullMethodName      = "/manage.ManageService/IGetCustomerByRid"
	ManageService_CreateAccount_FullMethodName          = "/manage.ManageService/CreateAccount"
	ManageService_GetAccountByAccNumber_FullMethodName  = "/manage.ManageService/GetAccountByAccNumber"
	ManageService_IGetAccountByAccNumber_FullMethodName = "/manage.ManageService/IGetAccountByAccNumber"
)

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageServiceClient interface {
	CreateCustomer(ctx context.Context, in *customer.CreateCustomerRequest, opts ...grpc.CallOption) (*customer.CreateCustomerResponse, error)
	VerifyEmail(ctx context.Context, in *customer.VerifyEmailRequest, opts ...grpc.CallOption) (*customer.VerifyEmailResponse, error)
	GetCustomerByRid(ctx context.Context, in *customer.GetCustomerByRidRequest, opts ...grpc.CallOption) (*customer.GetCustomerByRidResponse, error)
	IGetCustomerByID(ctx context.Context, in *customer.IGetCustomerByIDRequest, opts ...grpc.CallOption) (*customer.IGetCustomerByIDResponse, error)
	IGetCustomerByRid(ctx context.Context, in *customer.IGetCustomerByRidRequest, opts ...grpc.CallOption) (*customer.IGetCustomerByRidResponse, error)
	CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error)
	GetAccountByAccNumber(ctx context.Context, in *account.GetAccountByAccNumberRequest, opts ...grpc.CallOption) (*account.GetAccountByAccNumberResponse, error)
	IGetAccountByAccNumber(ctx context.Context, in *account.IGetAccountByAccNumberRequest, opts ...grpc.CallOption) (*account.IGetAccountByAccNumberResponse, error)
}

type manageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageServiceClient(cc grpc.ClientConnInterface) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) CreateCustomer(ctx context.Context, in *customer.CreateCustomerRequest, opts ...grpc.CallOption) (*customer.CreateCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(customer.CreateCustomerResponse)
	err := c.cc.Invoke(ctx, ManageService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) VerifyEmail(ctx context.Context, in *customer.VerifyEmailRequest, opts ...grpc.CallOption) (*customer.VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(customer.VerifyEmailResponse)
	err := c.cc.Invoke(ctx, ManageService_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) GetCustomerByRid(ctx context.Context, in *customer.GetCustomerByRidRequest, opts ...grpc.CallOption) (*customer.GetCustomerByRidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(customer.GetCustomerByRidResponse)
	err := c.cc.Invoke(ctx, ManageService_GetCustomerByRid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) IGetCustomerByID(ctx context.Context, in *customer.IGetCustomerByIDRequest, opts ...grpc.CallOption) (*customer.IGetCustomerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(customer.IGetCustomerByIDResponse)
	err := c.cc.Invoke(ctx, ManageService_IGetCustomerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) IGetCustomerByRid(ctx context.Context, in *customer.IGetCustomerByRidRequest, opts ...grpc.CallOption) (*customer.IGetCustomerByRidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(customer.IGetCustomerByRidResponse)
	err := c.cc.Invoke(ctx, ManageService_IGetCustomerByRid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(account.CreateAccountResponse)
	err := c.cc.Invoke(ctx, ManageService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) GetAccountByAccNumber(ctx context.Context, in *account.GetAccountByAccNumberRequest, opts ...grpc.CallOption) (*account.GetAccountByAccNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(account.GetAccountByAccNumberResponse)
	err := c.cc.Invoke(ctx, ManageService_GetAccountByAccNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) IGetAccountByAccNumber(ctx context.Context, in *account.IGetAccountByAccNumberRequest, opts ...grpc.CallOption) (*account.IGetAccountByAccNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(account.IGetAccountByAccNumberResponse)
	err := c.cc.Invoke(ctx, ManageService_IGetAccountByAccNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
// All implementations must embed UnimplementedManageServiceServer
// for forward compatibility.
type ManageServiceServer interface {
	CreateCustomer(context.Context, *customer.CreateCustomerRequest) (*customer.CreateCustomerResponse, error)
	VerifyEmail(context.Context, *customer.VerifyEmailRequest) (*customer.VerifyEmailResponse, error)
	GetCustomerByRid(context.Context, *customer.GetCustomerByRidRequest) (*customer.GetCustomerByRidResponse, error)
	IGetCustomerByID(context.Context, *customer.IGetCustomerByIDRequest) (*customer.IGetCustomerByIDResponse, error)
	IGetCustomerByRid(context.Context, *customer.IGetCustomerByRidRequest) (*customer.IGetCustomerByRidResponse, error)
	CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error)
	GetAccountByAccNumber(context.Context, *account.GetAccountByAccNumberRequest) (*account.GetAccountByAccNumberResponse, error)
	IGetAccountByAccNumber(context.Context, *account.IGetAccountByAccNumberRequest) (*account.IGetAccountByAccNumberResponse, error)
	mustEmbedUnimplementedManageServiceServer()
}

// UnimplementedManageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManageServiceServer struct{}

func (UnimplementedManageServiceServer) CreateCustomer(context.Context, *customer.CreateCustomerRequest) (*customer.CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedManageServiceServer) VerifyEmail(context.Context, *customer.VerifyEmailRequest) (*customer.VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedManageServiceServer) GetCustomerByRid(context.Context, *customer.GetCustomerByRidRequest) (*customer.GetCustomerByRidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByRid not implemented")
}
func (UnimplementedManageServiceServer) IGetCustomerByID(context.Context, *customer.IGetCustomerByIDRequest) (*customer.IGetCustomerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IGetCustomerByID not implemented")
}
func (UnimplementedManageServiceServer) IGetCustomerByRid(context.Context, *customer.IGetCustomerByRidRequest) (*customer.IGetCustomerByRidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IGetCustomerByRid not implemented")
}
func (UnimplementedManageServiceServer) CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedManageServiceServer) GetAccountByAccNumber(context.Context, *account.GetAccountByAccNumberRequest) (*account.GetAccountByAccNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAccNumber not implemented")
}
func (UnimplementedManageServiceServer) IGetAccountByAccNumber(context.Context, *account.IGetAccountByAccNumberRequest) (*account.IGetAccountByAccNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IGetAccountByAccNumber not implemented")
}
func (UnimplementedManageServiceServer) mustEmbedUnimplementedManageServiceServer() {}
func (UnimplementedManageServiceServer) testEmbeddedByValue()                       {}

// UnsafeManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServiceServer will
// result in compilation errors.
type UnsafeManageServiceServer interface {
	mustEmbedUnimplementedManageServiceServer()
}

func RegisterManageServiceServer(s grpc.ServiceRegistrar, srv ManageServiceServer) {
	// If the following call pancis, it indicates UnimplementedManageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManageService_ServiceDesc, srv)
}

func _ManageService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).CreateCustomer(ctx, req.(*customer.CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).VerifyEmail(ctx, req.(*customer.VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_GetCustomerByRid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.GetCustomerByRidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).GetCustomerByRid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_GetCustomerByRid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).GetCustomerByRid(ctx, req.(*customer.GetCustomerByRidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_IGetCustomerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.IGetCustomerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).IGetCustomerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_IGetCustomerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).IGetCustomerByID(ctx, req.(*customer.IGetCustomerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_IGetCustomerByRid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.IGetCustomerByRidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).IGetCustomerByRid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_IGetCustomerByRid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).IGetCustomerByRid(ctx, req.(*customer.IGetCustomerByRidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).CreateAccount(ctx, req.(*account.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_GetAccountByAccNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountByAccNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).GetAccountByAccNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_GetAccountByAccNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).GetAccountByAccNumber(ctx, req.(*account.GetAccountByAccNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_IGetAccountByAccNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.IGetAccountByAccNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).IGetAccountByAccNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_IGetAccountByAccNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).IGetAccountByAccNumber(ctx, req.(*account.IGetAccountByAccNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageService_ServiceDesc is the grpc.ServiceDesc for ManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _ManageService_CreateCustomer_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _ManageService_VerifyEmail_Handler,
		},
		{
			MethodName: "GetCustomerByRid",
			Handler:    _ManageService_GetCustomerByRid_Handler,
		},
		{
			MethodName: "IGetCustomerByID",
			Handler:    _ManageService_IGetCustomerByID_Handler,
		},
		{
			MethodName: "IGetCustomerByRid",
			Handler:    _ManageService_IGetCustomerByRid_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ManageService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccountByAccNumber",
			Handler:    _ManageService_GetAccountByAccNumber_Handler,
		},
		{
			MethodName: "IGetAccountByAccNumber",
			Handler:    _ManageService_IGetAccountByAccNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/service_manage.proto",
}
