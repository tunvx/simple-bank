// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: auth/service_auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_CreateCustomerCredential_FullMethodName = "/auth.Auth/CreateCustomerCredential"
	Auth_UpdateCustomerCredential_FullMethodName = "/auth.Auth/UpdateCustomerCredential"
	Auth_LoginCustomer_FullMethodName            = "/auth.Auth/LoginCustomer"
	Auth_GenerateTestAccessToken_FullMethodName  = "/auth.Auth/GenerateTestAccessToken"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CreateCustomerCredential(ctx context.Context, in *CreateCustomerCredentialRequest, opts ...grpc.CallOption) (*CreateCustomerCredentialResponse, error)
	UpdateCustomerCredential(ctx context.Context, in *UpdateCustomerCredentialRequest, opts ...grpc.CallOption) (*UpdateCustomerCredentialResponse, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error)
	GenerateTestAccessToken(ctx context.Context, in *GenerateTestAccessTokenRequest, opts ...grpc.CallOption) (*GenerateTestAccessTokenResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CreateCustomerCredential(ctx context.Context, in *CreateCustomerCredentialRequest, opts ...grpc.CallOption) (*CreateCustomerCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerCredentialResponse)
	err := c.cc.Invoke(ctx, Auth_CreateCustomerCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateCustomerCredential(ctx context.Context, in *UpdateCustomerCredentialRequest, opts ...grpc.CallOption) (*UpdateCustomerCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerCredentialResponse)
	err := c.cc.Invoke(ctx, Auth_UpdateCustomerCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*LoginCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginCustomerResponse)
	err := c.cc.Invoke(ctx, Auth_LoginCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GenerateTestAccessToken(ctx context.Context, in *GenerateTestAccessTokenRequest, opts ...grpc.CallOption) (*GenerateTestAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTestAccessTokenResponse)
	err := c.cc.Invoke(ctx, Auth_GenerateTestAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	CreateCustomerCredential(context.Context, *CreateCustomerCredentialRequest) (*CreateCustomerCredentialResponse, error)
	UpdateCustomerCredential(context.Context, *UpdateCustomerCredentialRequest) (*UpdateCustomerCredentialResponse, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error)
	GenerateTestAccessToken(context.Context, *GenerateTestAccessTokenRequest) (*GenerateTestAccessTokenResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) CreateCustomerCredential(context.Context, *CreateCustomerCredentialRequest) (*CreateCustomerCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerCredential not implemented")
}
func (UnimplementedAuthServer) UpdateCustomerCredential(context.Context, *UpdateCustomerCredentialRequest) (*UpdateCustomerCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerCredential not implemented")
}
func (UnimplementedAuthServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*LoginCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedAuthServer) GenerateTestAccessToken(context.Context, *GenerateTestAccessTokenRequest) (*GenerateTestAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestAccessToken not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_CreateCustomerCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateCustomerCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateCustomerCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateCustomerCredential(ctx, req.(*CreateCustomerCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateCustomerCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateCustomerCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdateCustomerCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateCustomerCredential(ctx, req.(*UpdateCustomerCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GenerateTestAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTestAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GenerateTestAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GenerateTestAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GenerateTestAccessToken(ctx, req.(*GenerateTestAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomerCredential",
			Handler:    _Auth_CreateCustomerCredential_Handler,
		},
		{
			MethodName: "UpdateCustomerCredential",
			Handler:    _Auth_UpdateCustomerCredential_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _Auth_LoginCustomer_Handler,
		},
		{
			MethodName: "GenerateTestAccessToken",
			Handler:    _Auth_GenerateTestAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/service_auth.proto",
}
