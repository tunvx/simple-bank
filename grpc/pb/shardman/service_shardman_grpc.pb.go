// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: shardman/service_shardman.proto

package shardman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShardManagement_InsertAccountShard_FullMethodName     = "/shardman.ShardManagement/InsertAccountShard"
	ShardManagement_InsertCustomerShard_FullMethodName    = "/shardman.ShardManagement/InsertCustomerShard"
	ShardManagement_LookupAccountShardPair_FullMethodName = "/shardman.ShardManagement/LookupAccountShardPair"
	ShardManagement_LookupAccountShard_FullMethodName     = "/shardman.ShardManagement/LookupAccountShard"
	ShardManagement_LookupCustomerShard_FullMethodName    = "/shardman.ShardManagement/LookupCustomerShard"
)

// ShardManagementClient is the client API for ShardManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardManagementClient interface {
	InsertAccountShard(ctx context.Context, in *InsertAccountShardRequest, opts ...grpc.CallOption) (*InsertAccountShardResponse, error)
	InsertCustomerShard(ctx context.Context, in *InsertCustomerShardRequest, opts ...grpc.CallOption) (*InsertCustomerShardResponse, error)
	LookupAccountShardPair(ctx context.Context, in *LookupAccountShardPairRequest, opts ...grpc.CallOption) (*LookupAccountShardPairResponse, error)
	LookupAccountShard(ctx context.Context, in *LookupAccountShardRequest, opts ...grpc.CallOption) (*LookupAccountShardResponse, error)
	LookupCustomerShard(ctx context.Context, in *LookupCustomerShardRequest, opts ...grpc.CallOption) (*LookupCustomerShardResponse, error)
}

type shardManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewShardManagementClient(cc grpc.ClientConnInterface) ShardManagementClient {
	return &shardManagementClient{cc}
}

func (c *shardManagementClient) InsertAccountShard(ctx context.Context, in *InsertAccountShardRequest, opts ...grpc.CallOption) (*InsertAccountShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertAccountShardResponse)
	err := c.cc.Invoke(ctx, ShardManagement_InsertAccountShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardManagementClient) InsertCustomerShard(ctx context.Context, in *InsertCustomerShardRequest, opts ...grpc.CallOption) (*InsertCustomerShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertCustomerShardResponse)
	err := c.cc.Invoke(ctx, ShardManagement_InsertCustomerShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardManagementClient) LookupAccountShardPair(ctx context.Context, in *LookupAccountShardPairRequest, opts ...grpc.CallOption) (*LookupAccountShardPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupAccountShardPairResponse)
	err := c.cc.Invoke(ctx, ShardManagement_LookupAccountShardPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardManagementClient) LookupAccountShard(ctx context.Context, in *LookupAccountShardRequest, opts ...grpc.CallOption) (*LookupAccountShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupAccountShardResponse)
	err := c.cc.Invoke(ctx, ShardManagement_LookupAccountShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardManagementClient) LookupCustomerShard(ctx context.Context, in *LookupCustomerShardRequest, opts ...grpc.CallOption) (*LookupCustomerShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupCustomerShardResponse)
	err := c.cc.Invoke(ctx, ShardManagement_LookupCustomerShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardManagementServer is the server API for ShardManagement service.
// All implementations must embed UnimplementedShardManagementServer
// for forward compatibility.
type ShardManagementServer interface {
	InsertAccountShard(context.Context, *InsertAccountShardRequest) (*InsertAccountShardResponse, error)
	InsertCustomerShard(context.Context, *InsertCustomerShardRequest) (*InsertCustomerShardResponse, error)
	LookupAccountShardPair(context.Context, *LookupAccountShardPairRequest) (*LookupAccountShardPairResponse, error)
	LookupAccountShard(context.Context, *LookupAccountShardRequest) (*LookupAccountShardResponse, error)
	LookupCustomerShard(context.Context, *LookupCustomerShardRequest) (*LookupCustomerShardResponse, error)
	mustEmbedUnimplementedShardManagementServer()
}

// UnimplementedShardManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShardManagementServer struct{}

func (UnimplementedShardManagementServer) InsertAccountShard(context.Context, *InsertAccountShardRequest) (*InsertAccountShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAccountShard not implemented")
}
func (UnimplementedShardManagementServer) InsertCustomerShard(context.Context, *InsertCustomerShardRequest) (*InsertCustomerShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCustomerShard not implemented")
}
func (UnimplementedShardManagementServer) LookupAccountShardPair(context.Context, *LookupAccountShardPairRequest) (*LookupAccountShardPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccountShardPair not implemented")
}
func (UnimplementedShardManagementServer) LookupAccountShard(context.Context, *LookupAccountShardRequest) (*LookupAccountShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccountShard not implemented")
}
func (UnimplementedShardManagementServer) LookupCustomerShard(context.Context, *LookupCustomerShardRequest) (*LookupCustomerShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupCustomerShard not implemented")
}
func (UnimplementedShardManagementServer) mustEmbedUnimplementedShardManagementServer() {}
func (UnimplementedShardManagementServer) testEmbeddedByValue()                         {}

// UnsafeShardManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardManagementServer will
// result in compilation errors.
type UnsafeShardManagementServer interface {
	mustEmbedUnimplementedShardManagementServer()
}

func RegisterShardManagementServer(s grpc.ServiceRegistrar, srv ShardManagementServer) {
	// If the following call pancis, it indicates UnimplementedShardManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShardManagement_ServiceDesc, srv)
}

func _ShardManagement_InsertAccountShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAccountShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagementServer).InsertAccountShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardManagement_InsertAccountShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagementServer).InsertAccountShard(ctx, req.(*InsertAccountShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardManagement_InsertCustomerShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCustomerShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagementServer).InsertCustomerShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardManagement_InsertCustomerShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagementServer).InsertCustomerShard(ctx, req.(*InsertCustomerShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardManagement_LookupAccountShardPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountShardPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagementServer).LookupAccountShardPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardManagement_LookupAccountShardPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagementServer).LookupAccountShardPair(ctx, req.(*LookupAccountShardPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardManagement_LookupAccountShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagementServer).LookupAccountShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardManagement_LookupAccountShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagementServer).LookupAccountShard(ctx, req.(*LookupAccountShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardManagement_LookupCustomerShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupCustomerShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardManagementServer).LookupCustomerShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardManagement_LookupCustomerShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardManagementServer).LookupCustomerShard(ctx, req.(*LookupCustomerShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardManagement_ServiceDesc is the grpc.ServiceDesc for ShardManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardman.ShardManagement",
	HandlerType: (*ShardManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertAccountShard",
			Handler:    _ShardManagement_InsertAccountShard_Handler,
		},
		{
			MethodName: "InsertCustomerShard",
			Handler:    _ShardManagement_InsertCustomerShard_Handler,
		},
		{
			MethodName: "LookupAccountShardPair",
			Handler:    _ShardManagement_LookupAccountShardPair_Handler,
		},
		{
			MethodName: "LookupAccountShard",
			Handler:    _ShardManagement_LookupAccountShard_Handler,
		},
		{
			MethodName: "LookupCustomerShard",
			Handler:    _ShardManagement_LookupCustomerShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shardman/service_shardman.proto",
}
