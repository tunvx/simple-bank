// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: moneytransfer/rpc_transfer_money.proto

package moneytransfer

import (
	account "github.com/tunvx/simplebank/grpc/pb/cusman/account"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Internal Transfer
type InternalTransferMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount           int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyType     string `protobuf:"bytes,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	SourceAccId      int64  `protobuf:"varint,3,opt,name=source_acc_id,json=sourceAccId,proto3" json:"source_acc_id,omitempty"`                // Source account ID
	BeneficiaryAccId int64  `protobuf:"varint,4,opt,name=beneficiary_acc_id,json=beneficiaryAccId,proto3" json:"beneficiary_acc_id,omitempty"` // Beneficiary account ID
	BeneficiaryName  string `protobuf:"bytes,5,opt,name=beneficiary_name,json=beneficiaryName,proto3" json:"beneficiary_name,omitempty"`       // Beneficiary name
	Message          string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InternalTransferMoneyRequest) Reset() {
	*x = InternalTransferMoneyRequest{}
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalTransferMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalTransferMoneyRequest) ProtoMessage() {}

func (x *InternalTransferMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalTransferMoneyRequest.ProtoReflect.Descriptor instead.
func (*InternalTransferMoneyRequest) Descriptor() ([]byte, []int) {
	return file_moneytransfer_rpc_transfer_money_proto_rawDescGZIP(), []int{0}
}

func (x *InternalTransferMoneyRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InternalTransferMoneyRequest) GetCurrencyType() string {
	if x != nil {
		return x.CurrencyType
	}
	return ""
}

func (x *InternalTransferMoneyRequest) GetSourceAccId() int64 {
	if x != nil {
		return x.SourceAccId
	}
	return 0
}

func (x *InternalTransferMoneyRequest) GetBeneficiaryAccId() int64 {
	if x != nil {
		return x.BeneficiaryAccId
	}
	return 0
}

func (x *InternalTransferMoneyRequest) GetBeneficiaryName() string {
	if x != nil {
		return x.BeneficiaryName
	}
	return ""
}

func (x *InternalTransferMoneyRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InternalTransferMoneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccessful       bool             `protobuf:"varint,1,opt,name=is_successful,json=isSuccessful,proto3" json:"is_successful,omitempty"`
	SourceAccount      *account.Account `protobuf:"bytes,2,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	BeneficiaryAccount *account.Account `protobuf:"bytes,3,opt,name=beneficiary_account,json=beneficiaryAccount,proto3" json:"beneficiary_account,omitempty"` // Just for development phase
}

func (x *InternalTransferMoneyResponse) Reset() {
	*x = InternalTransferMoneyResponse{}
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalTransferMoneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalTransferMoneyResponse) ProtoMessage() {}

func (x *InternalTransferMoneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalTransferMoneyResponse.ProtoReflect.Descriptor instead.
func (*InternalTransferMoneyResponse) Descriptor() ([]byte, []int) {
	return file_moneytransfer_rpc_transfer_money_proto_rawDescGZIP(), []int{1}
}

func (x *InternalTransferMoneyResponse) GetIsSuccessful() bool {
	if x != nil {
		return x.IsSuccessful
	}
	return false
}

func (x *InternalTransferMoneyResponse) GetSourceAccount() *account.Account {
	if x != nil {
		return x.SourceAccount
	}
	return nil
}

func (x *InternalTransferMoneyResponse) GetBeneficiaryAccount() *account.Account {
	if x != nil {
		return x.BeneficiaryAccount
	}
	return nil
}

// External Transfer
type ExternalTransferMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount              int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyType        string `protobuf:"bytes,2,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	SourceAccId         int64  `protobuf:"varint,3,opt,name=source_acc_id,json=sourceAccId,proto3" json:"source_acc_id,omitempty"`                        // Source account ID
	BeneficiaryAccId    int64  `protobuf:"varint,4,opt,name=beneficiary_acc_id,json=beneficiaryAccId,proto3" json:"beneficiary_acc_id,omitempty"`         // Beneficiary account ID
	BeneficiaryBankCode string `protobuf:"bytes,5,opt,name=beneficiary_bank_code,json=beneficiaryBankCode,proto3" json:"beneficiary_bank_code,omitempty"` // Beneficiary Bank Code
	BeneficiaryName     string `protobuf:"bytes,6,opt,name=beneficiary_name,json=beneficiaryName,proto3" json:"beneficiary_name,omitempty"`               // Beneficiary name
	Message             string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ExternalTransferMoneyRequest) Reset() {
	*x = ExternalTransferMoneyRequest{}
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalTransferMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTransferMoneyRequest) ProtoMessage() {}

func (x *ExternalTransferMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTransferMoneyRequest.ProtoReflect.Descriptor instead.
func (*ExternalTransferMoneyRequest) Descriptor() ([]byte, []int) {
	return file_moneytransfer_rpc_transfer_money_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalTransferMoneyRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExternalTransferMoneyRequest) GetCurrencyType() string {
	if x != nil {
		return x.CurrencyType
	}
	return ""
}

func (x *ExternalTransferMoneyRequest) GetSourceAccId() int64 {
	if x != nil {
		return x.SourceAccId
	}
	return 0
}

func (x *ExternalTransferMoneyRequest) GetBeneficiaryAccId() int64 {
	if x != nil {
		return x.BeneficiaryAccId
	}
	return 0
}

func (x *ExternalTransferMoneyRequest) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *ExternalTransferMoneyRequest) GetBeneficiaryName() string {
	if x != nil {
		return x.BeneficiaryName
	}
	return ""
}

func (x *ExternalTransferMoneyRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExternalTransferMoneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccessful  bool             `protobuf:"varint,1,opt,name=is_successful,json=isSuccessful,proto3" json:"is_successful,omitempty"`
	SourceAccount *account.Account `protobuf:"bytes,2,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
}

func (x *ExternalTransferMoneyResponse) Reset() {
	*x = ExternalTransferMoneyResponse{}
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalTransferMoneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTransferMoneyResponse) ProtoMessage() {}

func (x *ExternalTransferMoneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_moneytransfer_rpc_transfer_money_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTransferMoneyResponse.ProtoReflect.Descriptor instead.
func (*ExternalTransferMoneyResponse) Descriptor() ([]byte, []int) {
	return file_moneytransfer_rpc_transfer_money_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalTransferMoneyResponse) GetIsSuccessful() bool {
	if x != nil {
		return x.IsSuccessful
	}
	return false
}

func (x *ExternalTransferMoneyResponse) GetSourceAccount() *account.Account {
	if x != nil {
		return x.SourceAccount
	}
	return nil
}

var File_moneytransfer_rpc_transfer_money_proto protoreflect.FileDescriptor

var file_moneytransfer_rpc_transfer_money_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x1c, 0x63, 0x75, 0x73, 0x6d, 0x61, 0x6e, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02,
	0x0a, 0x1c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x37, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x6e, 0x76, 0x78, 0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_moneytransfer_rpc_transfer_money_proto_rawDescOnce sync.Once
	file_moneytransfer_rpc_transfer_money_proto_rawDescData = file_moneytransfer_rpc_transfer_money_proto_rawDesc
)

func file_moneytransfer_rpc_transfer_money_proto_rawDescGZIP() []byte {
	file_moneytransfer_rpc_transfer_money_proto_rawDescOnce.Do(func() {
		file_moneytransfer_rpc_transfer_money_proto_rawDescData = protoimpl.X.CompressGZIP(file_moneytransfer_rpc_transfer_money_proto_rawDescData)
	})
	return file_moneytransfer_rpc_transfer_money_proto_rawDescData
}

var file_moneytransfer_rpc_transfer_money_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_moneytransfer_rpc_transfer_money_proto_goTypes = []any{
	(*InternalTransferMoneyRequest)(nil),  // 0: moneytransfer.InternalTransferMoneyRequest
	(*InternalTransferMoneyResponse)(nil), // 1: moneytransfer.InternalTransferMoneyResponse
	(*ExternalTransferMoneyRequest)(nil),  // 2: moneytransfer.ExternalTransferMoneyRequest
	(*ExternalTransferMoneyResponse)(nil), // 3: moneytransfer.ExternalTransferMoneyResponse
	(*account.Account)(nil),               // 4: account.Account
}
var file_moneytransfer_rpc_transfer_money_proto_depIdxs = []int32{
	4, // 0: moneytransfer.InternalTransferMoneyResponse.source_account:type_name -> account.Account
	4, // 1: moneytransfer.InternalTransferMoneyResponse.beneficiary_account:type_name -> account.Account
	4, // 2: moneytransfer.ExternalTransferMoneyResponse.source_account:type_name -> account.Account
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_moneytransfer_rpc_transfer_money_proto_init() }
func file_moneytransfer_rpc_transfer_money_proto_init() {
	if File_moneytransfer_rpc_transfer_money_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moneytransfer_rpc_transfer_money_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moneytransfer_rpc_transfer_money_proto_goTypes,
		DependencyIndexes: file_moneytransfer_rpc_transfer_money_proto_depIdxs,
		MessageInfos:      file_moneytransfer_rpc_transfer_money_proto_msgTypes,
	}.Build()
	File_moneytransfer_rpc_transfer_money_proto = out.File
	file_moneytransfer_rpc_transfer_money_proto_rawDesc = nil
	file_moneytransfer_rpc_transfer_money_proto_goTypes = nil
	file_moneytransfer_rpc_transfer_money_proto_depIdxs = nil
}
