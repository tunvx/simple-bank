// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: moneytransfer/service_moneytransfer.proto

package moneytransfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MoneyTransferService_CheckAccount_FullMethodName                      = "/moneytransfer.MoneyTransferService/CheckAccount"
	MoneyTransferService_ReceiveMoney_FullMethodName                      = "/moneytransfer.MoneyTransferService/ReceiveMoney"
	MoneyTransferService_InternalTransferMoney_FullMethodName             = "/moneytransfer.MoneyTransferService/InternalTransferMoney"
	MoneyTransferService_ExternalTransferMoney_FullMethodName             = "/moneytransfer.MoneyTransferService/ExternalTransferMoney"
	MoneyTransferService_HealthCheckGET_FullMethodName                    = "/moneytransfer.MoneyTransferService/HealthCheckGET"
	MoneyTransferService_HealthCheckPOST_FullMethodName                   = "/moneytransfer.MoneyTransferService/HealthCheckPOST"
	MoneyTransferService_MockCheckAccount_FullMethodName                  = "/moneytransfer.MoneyTransferService/MockCheckAccount"
	MoneyTransferService_MockCheckAccountJustAuth_FullMethodName          = "/moneytransfer.MoneyTransferService/MockCheckAccountJustAuth"
	MoneyTransferService_MockInternalTransferMoney_FullMethodName         = "/moneytransfer.MoneyTransferService/MockInternalTransferMoney"
	MoneyTransferService_MockInternalTransferMoneyJustAuth_FullMethodName = "/moneytransfer.MoneyTransferService/MockInternalTransferMoneyJustAuth"
)

// MoneyTransferServiceClient is the client API for MoneyTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyTransferServiceClient interface {
	// Kiểm tra tài khoản
	CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error)
	// Nhận tiền (Receive Money)
	ReceiveMoney(ctx context.Context, in *ReceiveMoneyRequest, opts ...grpc.CallOption) (*ReceiveMoneyResponse, error)
	// Chuyển khoản nội bộ (Internal Transfer)
	InternalTransferMoney(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*InternalTransferMoneyResponse, error)
	// Chuyển khoản liên ngân hàng (External Transfer)
	ExternalTransferMoney(ctx context.Context, in *ExternalTransferMoneyRequest, opts ...grpc.CallOption) (*ExternalTransferMoneyResponse, error)
	// Kiểm tra kết nối máy chủ (Health Check)
	HealthCheckGET(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkayResponse, error)
	HealthCheckPOST(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkayResponse, error)
	// Kiểm thử API CheckAccount
	MockCheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*OkayResponse, error)
	MockCheckAccountJustAuth(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*OkayResponse, error)
	// Kiểm thử API Internal Transfer
	MockInternalTransferMoney(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*OkayResponse, error)
	MockInternalTransferMoneyJustAuth(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*OkayResponse, error)
}

type moneyTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyTransferServiceClient(cc grpc.ClientConnInterface) MoneyTransferServiceClient {
	return &moneyTransferServiceClient{cc}
}

func (c *moneyTransferServiceClient) CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAccountResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_CheckAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) ReceiveMoney(ctx context.Context, in *ReceiveMoneyRequest, opts ...grpc.CallOption) (*ReceiveMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveMoneyResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_ReceiveMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) InternalTransferMoney(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*InternalTransferMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalTransferMoneyResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_InternalTransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) ExternalTransferMoney(ctx context.Context, in *ExternalTransferMoneyRequest, opts ...grpc.CallOption) (*ExternalTransferMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalTransferMoneyResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_ExternalTransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) HealthCheckGET(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_HealthCheckGET_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) HealthCheckPOST(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_HealthCheckPOST_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) MockCheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_MockCheckAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) MockCheckAccountJustAuth(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_MockCheckAccountJustAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) MockInternalTransferMoney(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_MockInternalTransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) MockInternalTransferMoneyJustAuth(ctx context.Context, in *InternalTransferMoneyRequest, opts ...grpc.CallOption) (*OkayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkayResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_MockInternalTransferMoneyJustAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyTransferServiceServer is the server API for MoneyTransferService service.
// All implementations must embed UnimplementedMoneyTransferServiceServer
// for forward compatibility.
type MoneyTransferServiceServer interface {
	// Kiểm tra tài khoản
	CheckAccount(context.Context, *CheckAccountRequest) (*CheckAccountResponse, error)
	// Nhận tiền (Receive Money)
	ReceiveMoney(context.Context, *ReceiveMoneyRequest) (*ReceiveMoneyResponse, error)
	// Chuyển khoản nội bộ (Internal Transfer)
	InternalTransferMoney(context.Context, *InternalTransferMoneyRequest) (*InternalTransferMoneyResponse, error)
	// Chuyển khoản liên ngân hàng (External Transfer)
	ExternalTransferMoney(context.Context, *ExternalTransferMoneyRequest) (*ExternalTransferMoneyResponse, error)
	// Kiểm tra kết nối máy chủ (Health Check)
	HealthCheckGET(context.Context, *Empty) (*OkayResponse, error)
	HealthCheckPOST(context.Context, *Empty) (*OkayResponse, error)
	// Kiểm thử API CheckAccount
	MockCheckAccount(context.Context, *CheckAccountRequest) (*OkayResponse, error)
	MockCheckAccountJustAuth(context.Context, *CheckAccountRequest) (*OkayResponse, error)
	// Kiểm thử API Internal Transfer
	MockInternalTransferMoney(context.Context, *InternalTransferMoneyRequest) (*OkayResponse, error)
	MockInternalTransferMoneyJustAuth(context.Context, *InternalTransferMoneyRequest) (*OkayResponse, error)
	mustEmbedUnimplementedMoneyTransferServiceServer()
}

// UnimplementedMoneyTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoneyTransferServiceServer struct{}

func (UnimplementedMoneyTransferServiceServer) CheckAccount(context.Context, *CheckAccountRequest) (*CheckAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccount not implemented")
}
func (UnimplementedMoneyTransferServiceServer) ReceiveMoney(context.Context, *ReceiveMoneyRequest) (*ReceiveMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMoney not implemented")
}
func (UnimplementedMoneyTransferServiceServer) InternalTransferMoney(context.Context, *InternalTransferMoneyRequest) (*InternalTransferMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalTransferMoney not implemented")
}
func (UnimplementedMoneyTransferServiceServer) ExternalTransferMoney(context.Context, *ExternalTransferMoneyRequest) (*ExternalTransferMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalTransferMoney not implemented")
}
func (UnimplementedMoneyTransferServiceServer) HealthCheckGET(context.Context, *Empty) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheckGET not implemented")
}
func (UnimplementedMoneyTransferServiceServer) HealthCheckPOST(context.Context, *Empty) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheckPOST not implemented")
}
func (UnimplementedMoneyTransferServiceServer) MockCheckAccount(context.Context, *CheckAccountRequest) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockCheckAccount not implemented")
}
func (UnimplementedMoneyTransferServiceServer) MockCheckAccountJustAuth(context.Context, *CheckAccountRequest) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockCheckAccountJustAuth not implemented")
}
func (UnimplementedMoneyTransferServiceServer) MockInternalTransferMoney(context.Context, *InternalTransferMoneyRequest) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockInternalTransferMoney not implemented")
}
func (UnimplementedMoneyTransferServiceServer) MockInternalTransferMoneyJustAuth(context.Context, *InternalTransferMoneyRequest) (*OkayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockInternalTransferMoneyJustAuth not implemented")
}
func (UnimplementedMoneyTransferServiceServer) mustEmbedUnimplementedMoneyTransferServiceServer() {}
func (UnimplementedMoneyTransferServiceServer) testEmbeddedByValue()                              {}

// UnsafeMoneyTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyTransferServiceServer will
// result in compilation errors.
type UnsafeMoneyTransferServiceServer interface {
	mustEmbedUnimplementedMoneyTransferServiceServer()
}

func RegisterMoneyTransferServiceServer(s grpc.ServiceRegistrar, srv MoneyTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedMoneyTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MoneyTransferService_ServiceDesc, srv)
}

func _MoneyTransferService_CheckAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).CheckAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_CheckAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).CheckAccount(ctx, req.(*CheckAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_ReceiveMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).ReceiveMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_ReceiveMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).ReceiveMoney(ctx, req.(*ReceiveMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_InternalTransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalTransferMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).InternalTransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_InternalTransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).InternalTransferMoney(ctx, req.(*InternalTransferMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_ExternalTransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalTransferMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).ExternalTransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_ExternalTransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).ExternalTransferMoney(ctx, req.(*ExternalTransferMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_HealthCheckGET_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).HealthCheckGET(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_HealthCheckGET_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).HealthCheckGET(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_HealthCheckPOST_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).HealthCheckPOST(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_HealthCheckPOST_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).HealthCheckPOST(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_MockCheckAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).MockCheckAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_MockCheckAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).MockCheckAccount(ctx, req.(*CheckAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_MockCheckAccountJustAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).MockCheckAccountJustAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_MockCheckAccountJustAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).MockCheckAccountJustAuth(ctx, req.(*CheckAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_MockInternalTransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalTransferMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).MockInternalTransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_MockInternalTransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).MockInternalTransferMoney(ctx, req.(*InternalTransferMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_MockInternalTransferMoneyJustAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalTransferMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).MockInternalTransferMoneyJustAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_MockInternalTransferMoneyJustAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).MockInternalTransferMoneyJustAuth(ctx, req.(*InternalTransferMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyTransferService_ServiceDesc is the grpc.ServiceDesc for MoneyTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moneytransfer.MoneyTransferService",
	HandlerType: (*MoneyTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAccount",
			Handler:    _MoneyTransferService_CheckAccount_Handler,
		},
		{
			MethodName: "ReceiveMoney",
			Handler:    _MoneyTransferService_ReceiveMoney_Handler,
		},
		{
			MethodName: "InternalTransferMoney",
			Handler:    _MoneyTransferService_InternalTransferMoney_Handler,
		},
		{
			MethodName: "ExternalTransferMoney",
			Handler:    _MoneyTransferService_ExternalTransferMoney_Handler,
		},
		{
			MethodName: "HealthCheckGET",
			Handler:    _MoneyTransferService_HealthCheckGET_Handler,
		},
		{
			MethodName: "HealthCheckPOST",
			Handler:    _MoneyTransferService_HealthCheckPOST_Handler,
		},
		{
			MethodName: "MockCheckAccount",
			Handler:    _MoneyTransferService_MockCheckAccount_Handler,
		},
		{
			MethodName: "MockCheckAccountJustAuth",
			Handler:    _MoneyTransferService_MockCheckAccountJustAuth_Handler,
		},
		{
			MethodName: "MockInternalTransferMoney",
			Handler:    _MoneyTransferService_MockInternalTransferMoney_Handler,
		},
		{
			MethodName: "MockInternalTransferMoneyJustAuth",
			Handler:    _MoneyTransferService_MockInternalTransferMoneyJustAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moneytransfer/service_moneytransfer.proto",
}
