// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Accountstatus string

const (
	AccountstatusActive   Accountstatus = "active"
	AccountstatusInactive Accountstatus = "inactive"
)

func (e *Accountstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Accountstatus(s)
	case string:
		*e = Accountstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Accountstatus: %T", src)
	}
	return nil
}

type NullAccountstatus struct {
	Accountstatus Accountstatus `json:"accountstatus"`
	Valid         bool          `json:"valid"` // Valid is true if Accountstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Accountstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Accountstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Accountstatus), nil
}

type Currencytype string

const (
	CurrencytypeVND Currencytype = "VND"
	CurrencytypeUSD Currencytype = "USD"
)

func (e *Currencytype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currencytype(s)
	case string:
		*e = Currencytype(s)
	default:
		return fmt.Errorf("unsupported scan type for Currencytype: %T", src)
	}
	return nil
}

type NullCurrencytype struct {
	Currencytype Currencytype `json:"currencytype"`
	Valid        bool         `json:"valid"` // Valid is true if Currencytype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrencytype) Scan(value interface{}) error {
	if value == nil {
		ns.Currencytype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currencytype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrencytype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currencytype), nil
}

type Customersegment string

const (
	CustomersegmentIndividual       Customersegment = "individual"
	CustomersegmentSmallEnterprise  Customersegment = "small_enterprise"
	CustomersegmentMediumEnterprise Customersegment = "medium_enterprise"
	CustomersegmentLargeEnterprise  Customersegment = "large_enterprise"
	CustomersegmentInstitutional    Customersegment = "institutional"
)

func (e *Customersegment) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Customersegment(s)
	case string:
		*e = Customersegment(s)
	default:
		return fmt.Errorf("unsupported scan type for Customersegment: %T", src)
	}
	return nil
}

type NullCustomersegment struct {
	Customersegment Customersegment `json:"customersegment"`
	Valid           bool            `json:"valid"` // Valid is true if Customersegment is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCustomersegment) Scan(value interface{}) error {
	if value == nil {
		ns.Customersegment, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Customersegment.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCustomersegment) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Customersegment), nil
}

type Customertier string

const (
	CustomertierRegular  Customertier = "regular"
	CustomertierBronze   Customertier = "bronze"
	CustomertierSilver   Customertier = "silver"
	CustomertierGold     Customertier = "gold"
	CustomertierPlatinum Customertier = "platinum"
	CustomertierDiamond  Customertier = "diamond"
)

func (e *Customertier) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Customertier(s)
	case string:
		*e = Customertier(s)
	default:
		return fmt.Errorf("unsupported scan type for Customertier: %T", src)
	}
	return nil
}

type NullCustomertier struct {
	Customertier Customertier `json:"customertier"`
	Valid        bool         `json:"valid"` // Valid is true if Customertier is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCustomertier) Scan(value interface{}) error {
	if value == nil {
		ns.Customertier, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Customertier.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCustomertier) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Customertier), nil
}

type Financialstatus string

const (
	FinancialstatusExcellent Financialstatus = "excellent"
	FinancialstatusVeryGood  Financialstatus = "very_good"
	FinancialstatusGood      Financialstatus = "good"
	FinancialstatusFair      Financialstatus = "fair"
	FinancialstatusPoor      Financialstatus = "poor"
	FinancialstatusVeryPoor  Financialstatus = "very_poor"
)

func (e *Financialstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Financialstatus(s)
	case string:
		*e = Financialstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Financialstatus: %T", src)
	}
	return nil
}

type NullFinancialstatus struct {
	Financialstatus Financialstatus `json:"financialstatus"`
	Valid           bool            `json:"valid"` // Valid is true if Financialstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFinancialstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Financialstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Financialstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFinancialstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Financialstatus), nil
}

type Transactionstatus string

const (
	TransactionstatusPending   Transactionstatus = "pending"
	TransactionstatusCompleted Transactionstatus = "completed"
	TransactionstatusFailed    Transactionstatus = "failed"
)

func (e *Transactionstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transactionstatus(s)
	case string:
		*e = Transactionstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Transactionstatus: %T", src)
	}
	return nil
}

type NullTransactionstatus struct {
	Transactionstatus Transactionstatus `json:"transactionstatus"`
	Valid             bool              `json:"valid"` // Valid is true if Transactionstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Transactionstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transactionstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transactionstatus), nil
}

type Transactiontype string

const (
	TransactiontypeSendMoneyInternal    Transactiontype = "send_money_internal"
	TransactiontypeReceiveMoneyInternal Transactiontype = "receive_money_internal"
	TransactiontypeOthers               Transactiontype = "others"
)

func (e *Transactiontype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transactiontype(s)
	case string:
		*e = Transactiontype(s)
	default:
		return fmt.Errorf("unsupported scan type for Transactiontype: %T", src)
	}
	return nil
}

type NullTransactiontype struct {
	Transactiontype Transactiontype `json:"transactiontype"`
	Valid           bool            `json:"valid"` // Valid is true if Transactiontype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactiontype) Scan(value interface{}) error {
	if value == nil {
		ns.Transactiontype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transactiontype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactiontype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transactiontype), nil
}

type Account struct {
	AccountID      int64         `json:"account_id"`
	AccountNumber  string        `json:"account_number"`
	CustomerID     int64         `json:"customer_id"`
	CurrentBalance int64         `json:"current_balance"`
	CurrencyType   Currencytype  `json:"currency_type"`
	CreatedAt      time.Time     `json:"created_at"`
	Description    string        `json:"description"`
	AccountStatus  Accountstatus `json:"account_status"`
}

type Customer struct {
	CustomerID      int64           `json:"customer_id"`
	CustomerRid     string          `json:"customer_rid"`
	Fullname        string          `json:"fullname"`
	DateOfBirth     time.Time       `json:"date_of_birth"`
	Address         string          `json:"address"`
	PhoneNumber     string          `json:"phone_number"`
	Email           string          `json:"email"`
	CustomerTier    Customertier    `json:"customer_tier"`
	CustomerSegment Customersegment `json:"customer_segment"`
	FinancialStatus Financialstatus `json:"financial_status"`
	IsEmailVerified bool            `json:"is_email_verified"`
}

type MoneyTransferTransaction struct {
	TransactionID     int64             `json:"transaction_id"`
	Amount            int64             `json:"amount"`
	AccountID         int64             `json:"account_id"`
	NewBalance        int64             `json:"new_balance"`
	TransactionTime   time.Time         `json:"transaction_time"`
	Description       string            `json:"description"`
	TransactionType   Transactiontype   `json:"transaction_type"`
	TransactionStatus Transactionstatus `json:"transaction_status"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	CustomerID int64     `json:"customer_id"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
